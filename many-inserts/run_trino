#!/usr/bin/env bash

set -e

NUM_REPS=125

SCHEMA_NAME=many_inserts
BUCKET_NAME=many-inserts

OUTPUT_BASE_DIR="results/raw/$SCHEMA"
mkdir -p "$OUTPUT_BASE_DIR"

TRINO_SESSION='--session=hive.compression_codec=GZIP --session=iceberg.compression_codec=GZIP --session=delta.compression_codec=GZIP'

for CATALOG in hive iceberg delta; do

    OUTPUT_DIR="$OUTPUT_BASE_DIR/$CATALOG"
    if [[ -d "$OUTPUT_DIR" ]]; then
        echo "$OUTPUT_DIR already exists"
        exit 1
    fi

    $TRINO_HOME/bin/trino $TRINO_SESSION --catalog "$CATALOG" --execute "DROP SCHEMA IF EXISTS $SCHEMA_NAME CASCADE;"
    mcli mb -p "minio/$BUCKET_NAME"
    mcli rb --force "minio/$BUCKET_NAME"

    mkdir -p "$OUTPUT_DIR"/{sar,trace_op,trace_select,runtime_op,runtime_select,minio_du,hms,res}

    mcli mb "minio/$BUCKET_NAME"
    $TRINO_HOME/bin/trino $TRINO_SESSION --catalog "$CATALOG" --execute "CREATE SCHEMA $SCHEMA_NAME WITH (location = 's3a://$BUCKET_NAME/');"

    # Relies on iceberg.file-format = PARQUET (default)
    if [[ "$CATALOG" == 'hive' ]]; then
        $TRINO_HOME/bin/trino $TRINO_SESSION --catalog "$CATALOG" --schema "$SCHEMA_NAME" --execute "CREATE TABLE data (key INT, value INT) WITH (format = 'PARQUET');"
    else
        $TRINO_HOME/bin/trino $TRINO_SESSION --catalog "$CATALOG" --schema "$SCHEMA_NAME" --execute 'CREATE TABLE data (key INT, value INT);'
    fi

    # Start sar monitoring
    sar -o "$OUTPUT_DIR/sar/benchmark.sar" -A 1 &> /dev/null &
    SAR_PID=$!

    sleep 3

    for REP in $(seq -w 1 "$NUM_REPS"); do

        QUERY_ID="${CATALOG}_${REP}_op_$(openssl rand -hex 4)"
        mcli admin trace minio > "$OUTPUT_DIR/trace_op/$REP" &
        TRACE_PID=$!
        $TRINO_HOME/bin/trino $TRINO_SESSION --source "$QUERY_ID" --catalog "$CATALOG" --schema "$SCHEMA_NAME" --execute "INSERT INTO data VALUES ($((10#$REP)), 0);" &> /dev/null
        kill -SIGINT $TRACE_PID
        $TRINO_HOME/bin/trino $TRINO_SESSION --execute "SELECT CAST(TO_UNIXTIME(started) AS INT), TO_MILLISECONDS(\"end\" - started) FROM system.runtime.queries WHERE source = '$QUERY_ID';" --output-format CSV_UNQUOTED 2>/dev/null > "$OUTPUT_DIR/runtime_op/$REP"

        QUERY_ID="${CATALOG}_${REP}_select_$(openssl rand -hex 4)"
        mcli admin trace minio > "$OUTPUT_DIR/trace_select/$REP" &
        TRACE_PID=$!
        $TRINO_HOME/bin/trino $TRINO_SESSION --source "$QUERY_ID" --catalog "$CATALOG" --schema "$SCHEMA_NAME" --execute 'SELECT * FROM data;' --output-format CSV_UNQUOTED 2> /dev/null > "$OUTPUT_DIR/res/$REP"
        kill -SIGINT $TRACE_PID
        $TRINO_HOME/bin/trino $TRINO_SESSION --execute "SELECT CAST(TO_UNIXTIME(started) AS INT), TO_MILLISECONDS(\"end\" - started) FROM system.runtime.queries WHERE source = '$QUERY_ID';" --output-format CSV_UNQUOTED 2>/dev/null > "$OUTPUT_DIR/runtime_select/$REP"

        # Collect MinIO bucket size and number of objects
        s3cmd du "s3://$BUCKET_NAME/" > "$OUTPUT_DIR/minio_du/$REP"

        # Collect HMS SQL dump
        sudo -u postgres pg_dump hms > "$OUTPUT_DIR/hms/$REP"

        echo "$CATALOG: $REP / $NUM_REPS"

    done

    # Stop sar monitoring
    kill -SIGINT $SAR_PID

    $TRINO_HOME/bin/trino $TRINO_SESSION --catalog "$CATALOG" --execute "DROP SCHEMA $SCHEMA_NAME CASCADE;"
    mcli rb --force "minio/$BUCKET_NAME"

done

# Make a copy of the connector config
mkdir -p "$OUTPUT_BASE_DIR/conf"
cp $TRINO_HOME/etc/catalog/*.properties "$OUTPUT_BASE_DIR/conf/"
